#!/bin/bash
echo -n "Warning: This script will overwrite any existing vim settings.  Are you sure you want to proceed? (y/N): "; read -n 1 PROCEED
echo ""
if [ -z "$PROCEED" ]; then
  exit
fi
if [ "$PROCEED" == "Y" ]; then
  PROCEED=y
fi
if [ "$PROCEED" != "y" ]; then
  exit
fi


lowercase(){
    echo "$1" | sed "y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/"
}

OS=`lowercase \`uname\``
KERNEL=`uname -r`
MACH=`uname -m`

if [ "{$OS}" == "windowsnt" ]; then
    OS=windows
elif [ "{$OS}" == "darwin" ]; then
    OS=mac
    PM=brew
    LM="brew list"
    VIM=vim
    CTAGS=ctags
    REDHAT=
    INSTALL_PREFIX=
else
    OS=`uname`
    if [ "${OS}" = "Linux" ] ; then
      INSTALL_PREFIX="sudo"
        if [ -f /etc/redhat-release ] ; then
            DistroBasedOn='RedHat'
            PM=yum
            LM="rpm -qa"
            VIM=vim-enhanced
            CTAGS=ctags
        elif [ -f /etc/debian_version ] ; then
            DistroBasedOn='Debian'
            PM=apt-get
            LM="dpkg -l"
            VIM=vim-nox
            CTAGS=exuberant-ctags
            REDHAT=
        fi
        if [ -f /etc/UnitedLinux-release ] ; then
            DIST="${DIST}[`cat /etc/UnitedLinux-release | tr "\n" ' ' | sed s/VERSION.*//`]"
        fi
        OS=`lowercase $OS`
        DistroBasedOn=`lowercase $DistroBasedOn`
        readonly OS
        readonly DistroBasedOn
        readonly KERNEL
        readonly MACH
    fi

fi


VIM_PKG=$($LM | grep $VIM)
if [ -z "$VIM_PKG" ]; then
   $INSTALL_PREFIX $PM install $VIM
fi
CTAGS_PKG=$($LM | grep $CTAGS)
if [ -z "$CTAGS_PKG" ]; then
   $INSTALL_PREFIX $PM install $CTAGS
fi

VI=$(which vi 2> /dev/null)
if [[ -z "$VI" || ! -L /usr/bin/vi ]]; then
  echo -n "The vi command is not using the enhanced features of vim currently.  Would you like to use vim instead? (y/N): "; read -n 1 PROCEED
  echo ""
  if [ ! -z "$PROCEED" ]; then
    if [ "$PROCEED" == "Y" ]; then
      PROCEED=y
    fi
    if [ "$PROCEED" == "y" ]; then
      sudo rm -f /usr/bin/vi 2> /dev/null
      sudo ln -s /usr/bin/vim /usr/bin/vi
    fi
  fi
fi
cd
rm -f .vimrc
rm -rf .vim/
mkdir .vim
cd .vim
mkdir bundle
git init
git submodule add https://github.com/tpope/vim-pathogen.git bundle/pathogen
git submodule update --init
ln -s bundle/pathogen/autoload/ autoload
git submodule add https://github.com/flazz/vim-colorschemes.git bundle/colorschemes
git submodule update --init
ln -s bundle/colorschemes/colors/ colors
git submodule add https://github.com/kien/ctrlp.vim.git bundle/ctrlp
git submodule update --init
git submodule add https://github.com/tpope/vim-fugitive.git bundle/fugitive
git submodule update --init
git submodule add https://github.com/scrooloose/nerdcommenter.git bundle/nerdcommenter
git submodule update --init
git submodule add https://github.com/scrooloose/nerdtree.git bundle/nerdtree
git submodule update --init
git submodule add https://github.com/ervandew/screen.git bundle/screen
git submodule update --init
git submodule add https://github.com/tpope/vim-surround.git bundle/surround
git submodule update --init
git submodule add https://github.com/vim-syntastic/syntastic.git bundle/syntastic
git submodule update --init
git submodule add https://github.com/vim-scripts/SyntaxComplete.git bundle/syntaxcomplete
git submodule update --init
git submodule add https://github.com/majutsushi/tagbar.git bundle/tagbar
git submodule update --init
git submodule add https://github.com/joonty/vdebug.git bundle/vdebug
git submodule update --init
git submodule add https://github.com/Townk/vim-autoclose.git bundle/autoclose
git submodule update --init
git submodule add https://github.com/vim-airline/vim-airline-themes.git bundle/vim-airline-themes
git submodule update --init
git submodule add https://github.com/vim-airline/vim-airline.git bundle/vim-airline
git submodule update --init
git submodule add https://github.com/tpope/vim-repeat.git bundle/vim-repeat
git submodule update --init
git submodule add https://github.com/garbas/vim-snipmate.git bundle/vim-snipmate
git submodule update --init
git submodule add https://github.com/activebridge/rails-snippets.git bundle/rails-snippets
git submodule update --init
git submodule add https://github.com/tomtom/tlib_vim.git bundle/tlib_vim
git submodule update --init
git submodule add https://github.com/MarcWeber/vim-addon-mw-utils.git bundle/vim-addon-mw-utils
git submodule update --init

cat << "EOF" >> ~/.vimrc
" Allow Vim-only settings even if they break vi keybindings.
set nocompatible

" Always edit in utf-8:
set encoding=utf-8

" Enable filetype detection
filetype plugin on

" General settings
set scrolloff=2             "Number of lines to keep above/below cursor
set number                  "Show line numbers
set wildmode=longest,list   "Complete longest string, then list alternatives
set pastetoggle=<F2>        "Toggle paste mode
set fileformats=unix        "Use Unix line endings
set history=300             "Number of commands to remember
set showmode                "Show whether in Visual, Replace, or Insert Mode
set showmatch               "Show matching brackets/parentheses
set backspace=2             "Use standard backspace behavior
set hlsearch                "Highlight matches in search
set ruler                   "Show line and column number
set formatoptions=1         "Don't wrap text after a one-letter word
set linebreak               "Break lines when appropriate
set expandtab
set tabstop=2
set shiftwidth=2
set softtabstop=2
set autoindent
set smartindent
set smarttab
set viminfo='20,<1000,s10,h "Copy up to 1000 lines per register (default is 50)
"set showcmd            " Show (partial) command in status line.
set ignorecase         " Do case insensitive matching
set smartcase          " Do smart case matching
set incsearch          " Incremental search
"set autowrite          " Automatically save before commands like :next and :make
"set hidden             " Hide buffers when they are abandoned
set mouse=a            " Enable mouse usage (all modes)

" Enable CursorLine
set cursorline

" Persistent Undo (vim 7.3 and later)
if exists('&undofile') && !&undofile
  set undodir=~/.vim_runtime/undodir
  set undofile
endif

" Enable syntax highlighting
if &t_Co > 1
  syntax enable
endif
syntax on

" Uncomment the following to have Vim jump to the last position when
" reopening a file
if has("autocmd")
 au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
 \| exe "normal! g'\"" | endif
endif

" Load plugins
call pathogen#infect()
call pathogen#helptags()

" Set the color scheme
if ! has("gui_running")
 set t_Co=256
endif
" feel free to choose :set background=dark for a different style
set background=dark
colors distinguished

let g:AutoClosePairs = {'<': '>', '%': '%', '(': ')', '{': '}', '[': ']', '"': '"', "'": "'"}

" Mouse behavior
behave xterm

" Check syntax
nnoremap <silent> <F3> :SyntasticCheck<CR>
let g:syntastic_aggregate_errors = 1
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_jump = 2
let g:syntastic_auto_loc_list = 1
let g:syntastic_debug = 0
let g:syntastic_enable_highlighting = 1
let g:syntastic_enable_signs = 1
let g:syntastic_error_symbol = '✗'
let g:syntastic_quiet_messages = { "level": "warnings", "type": "syntax" }
let g:syntastic_stl_format = '[%E{Errors: %e starting on line %fe}%B{, }%W{Warnings: %w starting on line %fw}]'
let g:syntastic_style_error_symbol = 'S✗'
let g:syntastic_style_warning_symbol = 'S⚠'
let g:syntastic_warning_symbol = '⚠'
highlight SyntasticErrorLine guibg=red
highlight SyntasticWarningLine guibg=yellow

" Vince's modifications
set noswapfile
set hidden "opening a new file when the current buffer has unsaved changes causes files to be hidden instead of closed
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,.DS_Store,*.sql     "MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  "Windows
let g:ctrlp_map = '<Leader>t'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|sql)$'

" vim-airline configuration
set laststatus=2
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#syntastic#enabled = 1

"Make it easier to work with Tabs
:nnoremap <Tab> :bnext<CR>
:nnoremap <S-Tab> :bprevious<CR>
:nnoremap <C-X> :bdelete<CR>

" Toggle line numbers
nnoremap <silent> <F4> :set invnumber<CR>

" Highlight trailing whitespace
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Remove trailing whitespace
function! TrimWhiteSpace()
  %s/\s\+$//e
endfunction
autocmd BufWritePre *.css,*.inc,*.install,*.js,*.module,*.php,*.profile,*.scss,*.test,*.theme :call TrimWhiteSpace()

" Start a screen shell session and compass watch
nnoremap <silent> <F6> :ScreenShell compass watch<CR>

" Toggle the NERDTree window
"nnoremap <silent> <Leader>d :NERDTreeFind<CR>
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>
let NERDTreeShowHidden=0
let NERDTreeDirArrows=1
let NERDTreeAutoDeleteBuffer=1

autocmd StdinReadPre * let s:std_in=1

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" bind \ (backward slash) to grep shortcut
command -nargs=+ -complete=file -bar Ag silent! grep! <args>|cwindow|redraw!

nnoremap \ :Ag<SPACE>

" Make it easier to move between vim windows. use control and the move key
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" More Custom key mapping
map <S-u> :redo<cr>
map <C-n> :tabn<cr>
map <C-p> :tabp<cr>

" Override NERDSnippet key. Not sure what this does but it conflicts with tabbing between buffers
let g:NERDSnippets_key="<F7><F7>"

" Syntastic recommended settings (via github page
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

EOF
